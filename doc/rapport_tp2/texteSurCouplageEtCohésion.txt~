Si l'on fait une analyse globale du programme, nous pouvons constater que les décisions de conception et d'implémentations ont certaines forces, mais aussi certaines faiblesses.

Le principe des foncteurs est que le code l'utilisant n'a pas besoin de connaitre son implémentation pour pouvoir fonctionner. Le code dans le foncteur n'a pas besoin non plus de connaître l'implémentation extérieure. Le choix de l'utilisation de foncteurs pour le tri des formes apporte donc une cohésion assez forte. En effet, si je veux un critère additionnel pour le tri des formes, il me suffit simplement d'implémenter un autre foncteur et de passer une instance de ce foncteur à la fonction "sort" de notre liste doublement chaînée.

Malgré les forces de ce programme, il reste quelques faiblesses. La plus notable est celle d'avoir des méthodes faisant des traitements non cohésifs. Les classes dérivées de shape ont une méthode de dessin, de calcul de l'aire et et calcul de distance maximum entre deux de ces points. On ne peut pas dire que le type de cohésion entre ces méthodes est près d'être fonctionnel. La cohésion serait même plutôt de type occasionnelle. De plus ces classes ont toutes les informations nécessaires pour pouvoir faire de telles traitements à partir d'une classe extérieure. Cette faiblesse a peu d'impact pour un projet de petite envergure. Dans l'éventualité d'un projet plus important, on ne pourrait pas continuer longtemps à encapsuler des méthodes à l'intérieure de ces classes.
