Lors du dernier travail pratique, nous avons défini la méthode « Shape.draw() » qui devait être surchargée par tous les descendants de la classe « Shape ». Dans cette redéfinition, il fallait appeler la méthode parente avant d'ajouter le code nécessaire pour afficher la forme. Cette façon de procéder apportait une contrainte supplémentaire à toute personne désirant ajouter une forme et avait de grandes chances d'être oubliée. Nous nous sommes donc questionnés sur la façon d'obliger les classes descendantes à implémenter la fonction d'affichage sans nécessiter d'eux qu'ils appellent explicitement le code de la fonction parente. Après réflexion, nous avons décidé de séparer les deux éléments en deux méthodes différentes : la méthode publique « draw() » effectue les actions communes et la méthode protégée « doDraw() » que les descendants de « Shape » devront implémenter. Ainsi, il est impossible de compiler si le programmeur oublie d'implémenter la fonction d'affichage et ce dernier n'a pas à s'inquiéter d'appeler du code au début de sa fonction. Cette façon de procéder diminue donc le risque d'erreurs, particulièrement si plusieurs personnes sont appelées à étendre cette arborescence de classes.
